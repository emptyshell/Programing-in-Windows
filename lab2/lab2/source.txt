#include <windows.h>
#include <MMSystem.h>
#include <stdio.h>
LRESULT CALLBACK WndProc (HWND, UINT, WPARAM, LPARAM) ;
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,PSTR szCmdLine, int iCmdShow){
	static char szAppName[] = "Window";
	HWND        hwnd;
	MSG         msg;
	WNDCLASSEX  wndclass;
	// #Inregistrarea clasei ferestrei
	wndclass.cbSize = sizeof(wndclass); //cbSize reprezinta dimensiunea structurii
	wndclass.style = CS_HREDRAW | CS_VREDRAW;//se restabileste de fiecare data cand fereastra este redimensionata, fie pe orizontala sau pe verticala
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hInstance;
    wndclass.hIcon = LoadIcon(NULL, IDI_INFORMATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_HAND);
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //GetStockObject obtine un obiect grafic (in acest caz o pensula folosita pentru desenarea fondului ferestrei) 
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;
	wndclass.hIconSm = LoadIcon(NULL, IDI_INFORMATION);
	if(!RegisterClassEx(&wndclass)){ //inregistreaza o clasa de fereastra pentru fereastra programului
        MessageBox(NULL, "Inregistrarea ferestrei a esuat!", "Eroare!",
            MB_ICONEXCLAMATION | MB_OK);
        return 0;
    }
	// #Crearea ferestrei
	hwnd = CreateWindow(szAppName,         // numele clasei de fereastra (creaza o fereastra pe baza unei clase de fereastra ) 
		"Laborator nr.2",     // titlul ferestrei
		WS_TILEDWINDOW,     // stilul ferestrei
		CW_USEDEFAULT,           // pozitia initiala pe axa x
		CW_USEDEFAULT,           // pozitia initiala pe axa y
		650,           // dimensiunea initiala pe axa x
		585,           // dimensiunea initiala pe axa y
		NULL,                    // variabila handle a ferestrei parinte	
		NULL,                    // variabila handle a meniului
		hInstance,               // variabila handle a instantei programului
		NULL);		             // parametri de creare
	ShowWindow(hwnd, iCmdShow);
	UpdateWindow(hwnd);
	// #Bucla de mesaje
	while (GetMessage(&msg, NULL, 0, 0)){
		TranslateMessage(&msg);
		DispatchMessage(&msg);
		
	}
	return msg.wParam;
}
 LRESULT CALLBACK WndProc (HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
     {
     HDC         hdc ;
     PAINTSTRUCT ps ;
     RECT        rect ;
     BITMAP  Bitmap;
   	 HDC hCompatibleDC;
   	 HANDLE hBitmap, hOldBitmap;
   	 HBRUSH brush, old_br ;
   	 HPEN hPen;
     switch (iMsg)
          {
          case WM_CREATE :
              // PlaySound (TEXT("vasea.wav"), NULL, SND_FILENAME | SND_ASYNC) ;
			   PlaySound (TEXT("vasea.wav"), NULL,SND_NODEFAULT ) ;
			   
               return 0 ;
          case WM_PAINT :
          	
	           hdc = BeginPaint (hwnd, &ps) ;
               GetClientRect (hwnd, &rect) ;
               FillRect(GetDC(hwnd),&rect, CreateSolidBrush(RGB(200,200,120))) ;
            
			hBitmap =(HBITMAP)LoadImage(NULL,"image.bmp",IMAGE_BITMAP,0,0,LR_LOADFROMFILE);
			GetObject(hBitmap,sizeof(BITMAP),&Bitmap); //Obtinem marimea imaginii bitmap
			hCompatibleDC = CreateCompatibleDC(hdc); //Cream o noua variabila handle a contextului de dispozitiv
			hOldBitmap = SelectObject(hCompatibleDC,hBitmap);	//Pastram imaginea veche bitmap
			StretchBlt(hdc,150,150,200,175,hCompatibleDC,0,0,Bitmap.bmWidth,Bitmap.bmHeight,SRCCOPY);	//Copiem imaginea bitmap si o deplasam
			SelectObject(hCompatibleDC,hOldBitmap); //Restauram obiectul anterior
			DeleteObject(hBitmap);	//Stergem imaginea bitmap incarcata
			DeleteDC(hCompatibleDC); 	//Stergem variabila handle a contextului de dispozitiv
			
			brush=CreateSolidBrush(RGB(104,66,100));
	        old_br=(HBRUSH)SelectObject(hdc,brush);
			Ellipse(hdc, 150, 150, 170, 165);
			brush=CreateSolidBrush(RGB(129,65,123));
	        old_br=(HBRUSH)SelectObject(hdc,brush);
			Ellipse(hdc, 120, 120, 150, 140);
			brush=CreateSolidBrush(RGB(155,59,145));
	        old_br=(HBRUSH)SelectObject(hdc,brush);
			Ellipse(hdc, 80, 80, 130, 120);
			
			MoveToEx(hdc, 30,10, NULL);
			hPen = CreatePen(PS_DASHDOTDOT, 0.5,RGB(196,28,62));
			SelectObject(hdc, hPen);
			LineTo(hdc,150,10);
			LineTo(hdc, 150,60);
			LineTo(hdc, 30,60);
			LineTo (hdc, 30,10);
			hPen = CreatePen(PS_DASHDOTDOT, 0.1,RGB(196,28,62));
			brush=CreateSolidBrush(RGB(222,222,222));
	        old_br=(HBRUSH)SelectObject(hdc,brush);
			TextOut(hdc, 70, 30, "A-HA-HA!" ,7);
			        
			   SetTextColor(hdc,RGB(2,80,40));
			   SetBkMode(hdc,TRANSPARENT);
               TextOut (hdc, 185,15,"Lucrarea de laborator a studentului gr. TI-154 Cobilas Vasile ",62) ;

			
	           EndPaint (hwnd, &ps) ;
               return 0 ;
          case WM_DESTROY :
               PostQuitMessage (0) ;
               return 0 ;
          }
     return DefWindowProc (hwnd, iMsg, wParam, lParam) ;
     }    
     
     
     
     

